{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-ray Welcome! Prefect integrations with the Ray execution framework, a flexible distributed computing framework for Python. Provides a RayTaskRunner that enables flows to run tasks requiring parallel execution using Ray. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda, or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-ray with pip : pip install prefect-ray Running tasks on Ray The RayTaskRunner is a Prefect task runner that submits tasks to Ray for parallel execution. By default, a temporary Ray instance is created for the duration of the flow run. For example, this flow says hello and goodbye in parallel. from prefect import flow , task from prefect_ray.task_runners import RayTaskRunner from typing import List @task def say_hello ( name ): print ( f \"hello { name } \" ) @task def say_goodbye ( name ): print ( f \"goodbye { name } \" ) @flow ( task_runner = RayTaskRunner ()) def greetings ( names : List [ str ]): for name in names : say_hello ( name ) say_goodbye ( name ) greetings ([ \"arthur\" , \"trillian\" , \"ford\" , \"marvin\" ]) # truncated output ... goodbye trillian goodbye arthur hello trillian hello ford hello marvin hello arthur goodbye ford goodbye marvin ... If you already have a Ray instance running, you can provide the connection URL via an address argument. To configure your flow to use the RayTaskRunner : Make sure the prefect-ray collection is installed as described earlier: pip install prefect-ray . In your flow code, import RayTaskRunner from prefect_ray.task_runners . Assign it as the task runner when the flow is defined using the task_runner=RayTaskRunner argument. For example, this flow uses the RayTaskRunner with a local, temporary Ray instance created by Prefect at flow run time. from prefect import flow from prefect_ray.task_runners import RayTaskRunner @flow ( task_runner = RayTaskRunner ()) def my_flow (): ... This flow uses the RayTaskRunner configured to access an existing Ray instance at ray://192.0.2.255:8786 . from prefect import flow from prefect_ray.task_runners import RayTaskRunner @flow ( task_runner = RayTaskRunner ( address = \"ray://192.0.2.255:8786\" )) def my_flow (): ... RayTaskRunner accepts the following optional parameters: Parameter Description address Address of a currently running Ray instance, starting with the ray:// URI. init_kwargs Additional kwargs to use when calling ray.init . Note that Ray Client uses the ray:// URI to indicate the address of a Ray instance. If you don't provide the address of a Ray instance, Prefect creates a temporary instance automatically. Ray environment limitations While we're excited about adding support for parallel task execution via Ray to Prefect, there are some inherent limitations with Ray you should be aware of: Ray currently does not support Python 3.10. Ray support for non-x86/64 architectures such as ARM/M1 processors with installation from pip alone and will be skipped during installation of Prefect. It is possible to manually install the blocking component with conda . See the Ray documentation for instructions. See the Ray installation documentation for further compatibility information. Resources If you encounter and bugs while using prefect-ray , feel free to open an issue in the prefect-ray repository. If you have any questions or issues while using prefect-ray , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-ray for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-ray.git cd prefect-ray/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-ray","text":"","title":"prefect-ray"},{"location":"#welcome","text":"Prefect integrations with the Ray execution framework, a flexible distributed computing framework for Python. Provides a RayTaskRunner that enables flows to run tasks requiring parallel execution using Ray.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda, or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-ray with pip : pip install prefect-ray","title":"Installation"},{"location":"#running-tasks-on-ray","text":"The RayTaskRunner is a Prefect task runner that submits tasks to Ray for parallel execution. By default, a temporary Ray instance is created for the duration of the flow run. For example, this flow says hello and goodbye in parallel. from prefect import flow , task from prefect_ray.task_runners import RayTaskRunner from typing import List @task def say_hello ( name ): print ( f \"hello { name } \" ) @task def say_goodbye ( name ): print ( f \"goodbye { name } \" ) @flow ( task_runner = RayTaskRunner ()) def greetings ( names : List [ str ]): for name in names : say_hello ( name ) say_goodbye ( name ) greetings ([ \"arthur\" , \"trillian\" , \"ford\" , \"marvin\" ]) # truncated output ... goodbye trillian goodbye arthur hello trillian hello ford hello marvin hello arthur goodbye ford goodbye marvin ... If you already have a Ray instance running, you can provide the connection URL via an address argument. To configure your flow to use the RayTaskRunner : Make sure the prefect-ray collection is installed as described earlier: pip install prefect-ray . In your flow code, import RayTaskRunner from prefect_ray.task_runners . Assign it as the task runner when the flow is defined using the task_runner=RayTaskRunner argument. For example, this flow uses the RayTaskRunner with a local, temporary Ray instance created by Prefect at flow run time. from prefect import flow from prefect_ray.task_runners import RayTaskRunner @flow ( task_runner = RayTaskRunner ()) def my_flow (): ... This flow uses the RayTaskRunner configured to access an existing Ray instance at ray://192.0.2.255:8786 . from prefect import flow from prefect_ray.task_runners import RayTaskRunner @flow ( task_runner = RayTaskRunner ( address = \"ray://192.0.2.255:8786\" )) def my_flow (): ... RayTaskRunner accepts the following optional parameters: Parameter Description address Address of a currently running Ray instance, starting with the ray:// URI. init_kwargs Additional kwargs to use when calling ray.init . Note that Ray Client uses the ray:// URI to indicate the address of a Ray instance. If you don't provide the address of a Ray instance, Prefect creates a temporary instance automatically. Ray environment limitations While we're excited about adding support for parallel task execution via Ray to Prefect, there are some inherent limitations with Ray you should be aware of: Ray currently does not support Python 3.10. Ray support for non-x86/64 architectures such as ARM/M1 processors with installation from pip alone and will be skipped during installation of Prefect. It is possible to manually install the blocking component with conda . See the Ray documentation for instructions. See the Ray installation documentation for further compatibility information.","title":"Running tasks on Ray"},{"location":"#resources","text":"If you encounter and bugs while using prefect-ray , feel free to open an issue in the prefect-ray repository. If you have any questions or issues while using prefect-ray , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-ray for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-ray.git cd prefect-ray/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"task_runners/","text":"prefect_ray.task_runners Interface and implementations of the Ray Task Runner. Task Runners in Prefect are responsible for managing the execution of Prefect task runs. Generally speaking, users are not expected to interact with task runners outside of configuring and initializing them for a flow. Example from prefect import flow , task from prefect.task_runners import SequentialTaskRunner from typing import List @task def say_hello ( name ): print ( f \"hello { name } \" ) @task def say_goodbye ( name ): print ( f \"goodbye { name } \" ) @flow ( task_runner = SequentialTaskRunner ()) def greetings ( names : List [ str ]): for name in names : say_hello ( name ) say_goodbye ( name ) Switching to a RayTaskRunner : from prefect.task_runners import RayTaskRunner flow . task_runner = RayTaskRunner () greetings ([ \"arthur\" , \"trillian\" , \"ford\" , \"marvin\" ]) Output: hello arthur goodbye arthur hello trillian hello ford goodbye marvin hello marvin goodbye ford goodbye trillian RayTaskRunner A parallel task_runner that submits tasks to ray . By default, a temporary Ray cluster is created for the duration of the flow run. Alternatively, if you already have a ray instance running, you can provide the connection URL via the address kwarg. Parameters: Name Type Description Default address string Address of a currently running ray instance; if one is not provided, a temporary instance will be created. None init_kwargs dict Additional kwargs to use when calling ray.init . None Examples: Using a temporary local ray cluster: from prefect import flow from prefect_ray.task_runners import RayTaskRunner @flow ( task_runner = RayTaskRunner ()) def my_flow (): ... Connecting to an existing ray instance: RayTaskRunner ( address = \"ray://192.0.2.255:8786\" ) Source code in prefect_ray/task_runners.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 class RayTaskRunner ( BaseTaskRunner ): \"\"\" A parallel task_runner that submits tasks to `ray`. By default, a temporary Ray cluster is created for the duration of the flow run. Alternatively, if you already have a `ray` instance running, you can provide the connection URL via the `address` kwarg. Args: address (string, optional): Address of a currently running `ray` instance; if one is not provided, a temporary instance will be created. init_kwargs (dict, optional): Additional kwargs to use when calling `ray.init`. Examples: Using a temporary local ray cluster: ```python from prefect import flow from prefect_ray.task_runners import RayTaskRunner @flow(task_runner=RayTaskRunner()) def my_flow(): ... ``` Connecting to an existing ray instance: ```python RayTaskRunner(address=\"ray://192.0.2.255:8786\") ``` \"\"\" def __init__ ( self , address : str = None , init_kwargs : dict = None , ): # Store settings self . address = address self . init_kwargs = init_kwargs . copy () if init_kwargs else {} self . init_kwargs . setdefault ( \"namespace\" , \"prefect\" ) self . init_kwargs # Runtime attributes self . _ray_refs : Dict [ UUID , \"ray.ObjectRef\" ] = {} super () . __init__ () @property def concurrency_type ( self ) -> TaskConcurrencyType : return TaskConcurrencyType . PARALLEL async def submit ( self , task_run : TaskRun , run_fn : Callable [ ... , Awaitable [ State [ R ]]], run_kwargs : Dict [ str , Any ], asynchronous : A = True , ) -> PrefectFuture [ R , A ]: if not self . _started : raise RuntimeError ( \"The task runner must be started before submitting work.\" ) # Ray does not support the submission of async functions and we must create a # sync entrypoint self . _ray_refs [ task_run . id ] = ray . remote ( sync_compatible ( run_fn )) . remote ( ** run_kwargs ) return PrefectFuture ( task_run = task_run , task_runner = self , asynchronous = asynchronous ) async def wait ( self , prefect_future : PrefectFuture , timeout : float = None , ) -> Optional [ State ]: ref = self . _get_ray_ref ( prefect_future ) result = None with anyio . move_on_after ( timeout ): # We await the reference directly instead of using `ray.get` so we can # avoid blocking the event loop try : result = await ref except BaseException as exc : result = exception_to_crashed_state ( exc ) return result async def _start ( self , exit_stack : AsyncExitStack ): \"\"\" Start the task runner and prep for context exit. - Creates a cluster if an external address is not set. - Creates a client to connect to the cluster. - Pushes a call to wait for all running futures to complete on exit. \"\"\" if self . address : self . logger . info ( f \"Connecting to an existing Ray instance at { self . address } \" ) init_args = ( self . address ,) else : self . logger . info ( \"Creating a local Ray instance\" ) init_args = () context = ray . init ( * init_args , ** self . init_kwargs ) dashboard_url = getattr ( context , \"dashboard_url\" , None ) exit_stack . push ( context ) # Display some information about the cluster nodes = ray . nodes () living_nodes = [ node for node in nodes if node . get ( \"alive\" )] self . logger . info ( f \"Using Ray cluster with { len ( living_nodes ) } nodes.\" ) if dashboard_url : self . logger . info ( f \"The Ray UI is available at { dashboard_url } \" , ) async def _shutdown_ray ( self ): \"\"\" Shuts down the cluster. \"\"\" self . logger . debug ( \"Shutting down Ray cluster...\" ) ray . shutdown () def _get_ray_ref ( self , prefect_future : PrefectFuture ) -> \"ray.ObjectRef\" : \"\"\" Retrieve the ray object reference corresponding to a prefect future. \"\"\" return self . _ray_refs [ prefect_future . run_id ]","title":"Task Runners"},{"location":"task_runners/#prefect_ray.task_runners","text":"Interface and implementations of the Ray Task Runner. Task Runners in Prefect are responsible for managing the execution of Prefect task runs. Generally speaking, users are not expected to interact with task runners outside of configuring and initializing them for a flow. Example from prefect import flow , task from prefect.task_runners import SequentialTaskRunner from typing import List @task def say_hello ( name ): print ( f \"hello { name } \" ) @task def say_goodbye ( name ): print ( f \"goodbye { name } \" ) @flow ( task_runner = SequentialTaskRunner ()) def greetings ( names : List [ str ]): for name in names : say_hello ( name ) say_goodbye ( name ) Switching to a RayTaskRunner : from prefect.task_runners import RayTaskRunner flow . task_runner = RayTaskRunner () greetings ([ \"arthur\" , \"trillian\" , \"ford\" , \"marvin\" ]) Output: hello arthur goodbye arthur hello trillian hello ford goodbye marvin hello marvin goodbye ford goodbye trillian","title":"task_runners"},{"location":"task_runners/#prefect_ray.task_runners.RayTaskRunner","text":"A parallel task_runner that submits tasks to ray . By default, a temporary Ray cluster is created for the duration of the flow run. Alternatively, if you already have a ray instance running, you can provide the connection URL via the address kwarg. Parameters: Name Type Description Default address string Address of a currently running ray instance; if one is not provided, a temporary instance will be created. None init_kwargs dict Additional kwargs to use when calling ray.init . None Examples: Using a temporary local ray cluster: from prefect import flow from prefect_ray.task_runners import RayTaskRunner @flow ( task_runner = RayTaskRunner ()) def my_flow (): ... Connecting to an existing ray instance: RayTaskRunner ( address = \"ray://192.0.2.255:8786\" ) Source code in prefect_ray/task_runners.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 class RayTaskRunner ( BaseTaskRunner ): \"\"\" A parallel task_runner that submits tasks to `ray`. By default, a temporary Ray cluster is created for the duration of the flow run. Alternatively, if you already have a `ray` instance running, you can provide the connection URL via the `address` kwarg. Args: address (string, optional): Address of a currently running `ray` instance; if one is not provided, a temporary instance will be created. init_kwargs (dict, optional): Additional kwargs to use when calling `ray.init`. Examples: Using a temporary local ray cluster: ```python from prefect import flow from prefect_ray.task_runners import RayTaskRunner @flow(task_runner=RayTaskRunner()) def my_flow(): ... ``` Connecting to an existing ray instance: ```python RayTaskRunner(address=\"ray://192.0.2.255:8786\") ``` \"\"\" def __init__ ( self , address : str = None , init_kwargs : dict = None , ): # Store settings self . address = address self . init_kwargs = init_kwargs . copy () if init_kwargs else {} self . init_kwargs . setdefault ( \"namespace\" , \"prefect\" ) self . init_kwargs # Runtime attributes self . _ray_refs : Dict [ UUID , \"ray.ObjectRef\" ] = {} super () . __init__ () @property def concurrency_type ( self ) -> TaskConcurrencyType : return TaskConcurrencyType . PARALLEL async def submit ( self , task_run : TaskRun , run_fn : Callable [ ... , Awaitable [ State [ R ]]], run_kwargs : Dict [ str , Any ], asynchronous : A = True , ) -> PrefectFuture [ R , A ]: if not self . _started : raise RuntimeError ( \"The task runner must be started before submitting work.\" ) # Ray does not support the submission of async functions and we must create a # sync entrypoint self . _ray_refs [ task_run . id ] = ray . remote ( sync_compatible ( run_fn )) . remote ( ** run_kwargs ) return PrefectFuture ( task_run = task_run , task_runner = self , asynchronous = asynchronous ) async def wait ( self , prefect_future : PrefectFuture , timeout : float = None , ) -> Optional [ State ]: ref = self . _get_ray_ref ( prefect_future ) result = None with anyio . move_on_after ( timeout ): # We await the reference directly instead of using `ray.get` so we can # avoid blocking the event loop try : result = await ref except BaseException as exc : result = exception_to_crashed_state ( exc ) return result async def _start ( self , exit_stack : AsyncExitStack ): \"\"\" Start the task runner and prep for context exit. - Creates a cluster if an external address is not set. - Creates a client to connect to the cluster. - Pushes a call to wait for all running futures to complete on exit. \"\"\" if self . address : self . logger . info ( f \"Connecting to an existing Ray instance at { self . address } \" ) init_args = ( self . address ,) else : self . logger . info ( \"Creating a local Ray instance\" ) init_args = () context = ray . init ( * init_args , ** self . init_kwargs ) dashboard_url = getattr ( context , \"dashboard_url\" , None ) exit_stack . push ( context ) # Display some information about the cluster nodes = ray . nodes () living_nodes = [ node for node in nodes if node . get ( \"alive\" )] self . logger . info ( f \"Using Ray cluster with { len ( living_nodes ) } nodes.\" ) if dashboard_url : self . logger . info ( f \"The Ray UI is available at { dashboard_url } \" , ) async def _shutdown_ray ( self ): \"\"\" Shuts down the cluster. \"\"\" self . logger . debug ( \"Shutting down Ray cluster...\" ) ray . shutdown () def _get_ray_ref ( self , prefect_future : PrefectFuture ) -> \"ray.ObjectRef\" : \"\"\" Retrieve the ray object reference corresponding to a prefect future. \"\"\" return self . _ray_refs [ prefect_future . run_id ]","title":"RayTaskRunner"}]}